
STM32G0_BareMetalSzablon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000138  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080001f8  08000200  00010200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080001f8  080001f8  00010200  2**0
                  CONTENTS
  4 .ARM          00000000  080001f8  080001f8  00010200  2**0
                  CONTENTS
  5 .preinit_array 00000000  080001f8  08000200  00010200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080001fc  080001fc  000101fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000200  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000200  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000460  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a2  00000000  00000000  00010688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00010830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  000108f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ed78  00000000  00000000  00010978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c92  00000000  00000000  0001f6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000533d3  00000000  00000000  00020382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00073755  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000178  00000000  00000000  000737a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080001e0 	.word	0x080001e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080001e0 	.word	0x080001e0

08000108 <main>:
#include "stm32g0xx_it.h" // interrupt handlers




int main(void) {
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0


	while(1){
 800010c:	e7fe      	b.n	800010c <main+0x4>

0800010e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800010e:	b580      	push	{r7, lr}
 8000110:	af00      	add	r7, sp, #0

  while (1)
 8000112:	e7fe      	b.n	8000112 <NMI_Handler+0x4>

08000114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000114:	b580      	push	{r7, lr}
 8000116:	af00      	add	r7, sp, #0

  while (1)
 8000118:	e7fe      	b.n	8000118 <HardFault_Handler+0x4>

0800011a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800011a:	b580      	push	{r7, lr}
 800011c:	af00      	add	r7, sp, #0

}
 800011e:	46c0      	nop			; (mov r8, r8)
 8000120:	46bd      	mov	sp, r7
 8000122:	bd80      	pop	{r7, pc}

08000124 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000124:	b580      	push	{r7, lr}
 8000126:	af00      	add	r7, sp, #0

}
 8000128:	46c0      	nop			; (mov r8, r8)
 800012a:	46bd      	mov	sp, r7
 800012c:	bd80      	pop	{r7, pc}

0800012e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800012e:	b580      	push	{r7, lr}
 8000130:	af00      	add	r7, sp, #0

}
 8000132:	46c0      	nop			; (mov r8, r8)
 8000134:	46bd      	mov	sp, r7
 8000136:	bd80      	pop	{r7, pc}

08000138 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000138:	b580      	push	{r7, lr}
 800013a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800013c:	46c0      	nop			; (mov r8, r8)
 800013e:	46bd      	mov	sp, r7
 8000140:	bd80      	pop	{r7, pc}
	...

08000144 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000144:	480d      	ldr	r0, [pc, #52]	; (800017c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000146:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000148:	f7ff fff6 	bl	8000138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800014c:	480c      	ldr	r0, [pc, #48]	; (8000180 <LoopForever+0x6>)
  ldr r1, =_edata
 800014e:	490d      	ldr	r1, [pc, #52]	; (8000184 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000150:	4a0d      	ldr	r2, [pc, #52]	; (8000188 <LoopForever+0xe>)
  movs r3, #0
 8000152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000154:	e002      	b.n	800015c <LoopCopyDataInit>

08000156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800015a:	3304      	adds	r3, #4

0800015c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800015c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800015e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000160:	d3f9      	bcc.n	8000156 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000164:	4c0a      	ldr	r4, [pc, #40]	; (8000190 <LoopForever+0x16>)
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000168:	e001      	b.n	800016e <LoopFillZerobss>

0800016a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800016a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800016c:	3204      	adds	r2, #4

0800016e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800016e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000170:	d3fb      	bcc.n	800016a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000172:	f000 f811 	bl	8000198 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000176:	f7ff ffc7 	bl	8000108 <main>

0800017a <LoopForever>:

LoopForever:
    b LoopForever
 800017a:	e7fe      	b.n	800017a <LoopForever>
  ldr   r0, =_estack
 800017c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000184:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000188:	08000200 	.word	0x08000200
  ldr r2, =_sbss
 800018c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000190:	2000001c 	.word	0x2000001c

08000194 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC_COMP_IRQHandler>
	...

08000198 <__libc_init_array>:
 8000198:	b570      	push	{r4, r5, r6, lr}
 800019a:	2600      	movs	r6, #0
 800019c:	4d0c      	ldr	r5, [pc, #48]	; (80001d0 <__libc_init_array+0x38>)
 800019e:	4c0d      	ldr	r4, [pc, #52]	; (80001d4 <__libc_init_array+0x3c>)
 80001a0:	1b64      	subs	r4, r4, r5
 80001a2:	10a4      	asrs	r4, r4, #2
 80001a4:	42a6      	cmp	r6, r4
 80001a6:	d109      	bne.n	80001bc <__libc_init_array+0x24>
 80001a8:	2600      	movs	r6, #0
 80001aa:	f000 f819 	bl	80001e0 <_init>
 80001ae:	4d0a      	ldr	r5, [pc, #40]	; (80001d8 <__libc_init_array+0x40>)
 80001b0:	4c0a      	ldr	r4, [pc, #40]	; (80001dc <__libc_init_array+0x44>)
 80001b2:	1b64      	subs	r4, r4, r5
 80001b4:	10a4      	asrs	r4, r4, #2
 80001b6:	42a6      	cmp	r6, r4
 80001b8:	d105      	bne.n	80001c6 <__libc_init_array+0x2e>
 80001ba:	bd70      	pop	{r4, r5, r6, pc}
 80001bc:	00b3      	lsls	r3, r6, #2
 80001be:	58eb      	ldr	r3, [r5, r3]
 80001c0:	4798      	blx	r3
 80001c2:	3601      	adds	r6, #1
 80001c4:	e7ee      	b.n	80001a4 <__libc_init_array+0xc>
 80001c6:	00b3      	lsls	r3, r6, #2
 80001c8:	58eb      	ldr	r3, [r5, r3]
 80001ca:	4798      	blx	r3
 80001cc:	3601      	adds	r6, #1
 80001ce:	e7f2      	b.n	80001b6 <__libc_init_array+0x1e>
 80001d0:	080001f8 	.word	0x080001f8
 80001d4:	080001f8 	.word	0x080001f8
 80001d8:	080001f8 	.word	0x080001f8
 80001dc:	080001fc 	.word	0x080001fc

080001e0 <_init>:
 80001e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001e2:	46c0      	nop			; (mov r8, r8)
 80001e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001e6:	bc08      	pop	{r3}
 80001e8:	469e      	mov	lr, r3
 80001ea:	4770      	bx	lr

080001ec <_fini>:
 80001ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001ee:	46c0      	nop			; (mov r8, r8)
 80001f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001f2:	bc08      	pop	{r3}
 80001f4:	469e      	mov	lr, r3
 80001f6:	4770      	bx	lr
